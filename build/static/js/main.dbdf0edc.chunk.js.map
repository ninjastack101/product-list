{"version":3,"sources":["components/RootWrapper.ts","components/Column.ts","components/Title.ts","components/ProductImage.ts","components/Row.ts","components/QuantityWrapper.ts","components/PriceWrapper.ts","components/Product.tsx","components/ProductList.tsx","global-styles.ts","actions/actionTypes.ts","actions/index.ts","selectors/index.ts","containers/App.tsx","constants/config.ts","sagas/apiSaga.ts","sagas/index.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["RootWrapper","styled","_templateObject","Column","Column_templateObject","Title","Title_templateObject","ProductImage","ProductImage_templateObject","Row","Row_templateObject","QuantityWrapper","QuantityWrapper_templateObject","PriceWrapper","PriceWrapper_templateObject","Wrapper","Product_templateObject","DetailsWrapper","_templateObject2","Product","props","react_default","a","createElement","components_ProductImage","src","thumbnail","alt","components_Title","title","components_QuantityWrapper","available_quantity","sold_quantity","components_PriceWrapper","price","ProductList_templateObject","ProductList","ProductList_Wrapper","products","map","product","components_Product","Object","assign","key","id","GlobalStyles","createGlobalStyle","global_styles_templateObject","CALL_API","fetchProducts","type","types","method","endPoint","selectProducts","createSelector","state","app","values","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","components_RootWrapper","components_ProductList","global_styles","React","Component","connect","dispatch","bindActionCreators","baseUrl","apiSaga","action","_action$types","request","success","failure","requestUrl","response","regenerator_default","wrap","_context","prev","next","slicedToArray","concat","put","axios","sent","status","Error","data","t0","error","stop","_marked","_callee","_context2","takeEvery","_marked2","rootSaga","sagaMiddleware","createSagaMiddleware","fork","sagas_marked","runSaga","run","initialState","undefined","isLoading","reducer","arguments","length","objectSpread","results","reducers","combineReducers","appReducer","logger","createLogger","diff","store","middlewares","createStore","compose","applyMiddleware","apply","configureStore","ReactDOM","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.dbdf0edc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst RootWrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n`;\n\nexport default RootWrapper;\n","import styled from 'styled-components';\n\nconst Column = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default Column;\n","import styled from 'styled-components';\n\nconst Title = styled('h3')`\n  font-size: 20px;\n`;\n\nexport default Title;\n","import styled from 'styled-components';\n\nconst ProductImage = styled('img')`\n  margin-right: 20px;\n`;\n\nexport default ProductImage;\n","import styled from 'styled-components';\n\nconst Row = styled('div')`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport default Row;\n","import styled from 'styled-components';\nimport Row from './Row';\n\nconst QuantityWrapper = styled(Row)`\n  font-size: 17px;\n  color: dimgray;\n\n  b:not(:last-child) {\n    margin-right: 50px;\n  }\n`;\n\nexport default QuantityWrapper;\n","import styled from 'styled-components';\nimport Column from './Column';\n\nconst PriceWrapper = styled(Column)`\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  color: dimgray;\n  p {\n    margin: 5px auto;\n    font-size: 15px;\n  }\n  span {\n    font-size: 17px;\n  }\n`;\n\nexport default PriceWrapper;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IProduct } from '../types';\nimport Row from './Row';\nimport Column from './Column';\nimport Title from './Title';\nimport ProductImage from './ProductImage';\nimport QuantityWrapper from './QuantityWrapper';\nimport PriceWrapper from './PriceWrapper';\n\ninterface IProps extends IProduct {};\n\nconst Wrapper = styled('div')`\n  display: flex;\n  margin: 10px auto;\n  padding: 10px;  \n`;\n\nconst DetailsWrapper = styled(Column)`\n  flex: 1;\n`;\n\nconst Product = (props: IProps) => (\n  <Wrapper>\n    <ProductImage src={props.thumbnail} alt=\"product-thumbnail\" />\n    <DetailsWrapper>\n      <Title>{props.title}</Title>\n      <QuantityWrapper>\n        <b>Available quantity: {props.available_quantity}</b>\n        <b>Sold quantity: {props.sold_quantity}</b>\n      </QuantityWrapper>\n    </DetailsWrapper>\n    <PriceWrapper>\n      <p>Price</p> <span>{props.price}</span>\n    </PriceWrapper>\n  </Wrapper>\n);\n\nexport default Product;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Product from './Product';\nimport { IProduct } from '../types';\n\ninterface IProps {\n  products: IProduct[];\n};\n\nconst Wrapper = styled('div')`\n  margin: auto 5%;\n`;\n\nconst ProductList = (props: IProps) => (\n  <Wrapper>\n    {props.products.map(\n      product => <Product key={product.id} {...product} />\n    )}\n  </Wrapper>\n);\n\nexport default ProductList;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  html,\n  body {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n  }\n\n  #root {\n    min-height: 100%;\n    min-width: 100%;\n  }\n`;\n\nexport default GlobalStyles;\n","\n// Api call action watched by saga\nexport const CALL_API = 'App/CALL_API';\n\n// actions types for fetching product list.\nexport const FETCH_PRODUCTS_LIST_REQUEST = 'App/FETCH_PRODUCTS_LIST_REQUEST';\nexport const FETCH_PRODUCTS_LIST_SUCCESS = 'App/FETCH_PRODUCTS_LIST_SUCCESS';\nexport const FETCH_PRODUCTS_LIST_FAILURE = 'App/FETCH_PRODUCTS_LIST_FAILURE';\n","import {\n  CALL_API,\n  FETCH_PRODUCTS_LIST_FAILURE,\n  FETCH_PRODUCTS_LIST_REQUEST,\n  FETCH_PRODUCTS_LIST_SUCCESS,\n} from './actionTypes';\n\nexport const fetchProducts = () => ({\n  type: CALL_API,\n  types: [\n    FETCH_PRODUCTS_LIST_REQUEST,\n    FETCH_PRODUCTS_LIST_SUCCESS,\n    FETCH_PRODUCTS_LIST_FAILURE,\n  ],\n  method: 'get',\n  endPoint: 'sites/MLA/search?q=book&limit=30#json',\n});\n","import { createSelector } from 'reselect'\nimport { IApplicationRootState } from '../types';\n\nexport const selectApp = (state: IApplicationRootState) => state.app\n\nexport const selectProducts = createSelector(\n  selectApp,\n  app => app.products.values,\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\n\nimport RootWrapper from '../components/RootWrapper';\nimport ProductList from '../components/ProductList';\nimport GlobalStyles from '../global-styles';\nimport { fetchProducts } from '../actions';\nimport { selectProducts } from '../selectors';\nimport { IApplicationRootState, IProduct } from '../types';\n\ninterface IProps {\n  fetchProducts: Function;\n  products: IProduct[];\n};\n\nclass App extends React.Component<IProps> {\n  constructor(props: IProps) {\n    super(props);\n\n    props.fetchProducts();\n  }\n\n  render() {\n    return (\n      <RootWrapper>\n        <ProductList products={this.props.products} />\n        <GlobalStyles />\n      </RootWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IApplicationRootState) => ({\n  products: selectProducts(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  fetchProducts,\n}, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","\nexport const baseUrl: string = 'https://api.mercadolibre.com';\n","import axios from 'axios';\nimport { takeEvery, put } from 'redux-saga/effects'\nimport { CALL_API } from '../actions/actionTypes';\nimport { baseUrl } from '../constants/config';\n\ninterface IApiAction {\n  type: string;\n  method: string;\n  endPoint: string;\n  types: string[];\n};\n\nexport function* apiSaga(action: IApiAction) {\n  const [request, success, failure] = action.types;\n  const requestUrl = `${baseUrl}/${action.endPoint}`;\n\n  yield put({ type: request });\n\n  try {\n    const response = yield (axios as any)[action.method](requestUrl);\n    if (response.status < 200 || response.status > 400) {\n      throw new Error('Failed to fetch response from server');\n    }\n  \n    yield put({ type: success, data: response.data });\n  } catch(error) {\n    yield put({ type: failure, error });\n  }\n}\n\nexport default function* () {\n  yield takeEvery(CALL_API, apiSaga);\n}","import { fork } from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\nimport apiSaga from './apiSaga';\n\nexport const sagaMiddleware = createSagaMiddleware();\n\nexport function* rootSaga() {\n  yield fork(apiSaga);\n}\n\nexport const runSaga = () => {\n  sagaMiddleware.run(rootSaga);\n};\n\nexport default runSaga;\n","import { AnyAction } from \"redux\";\nimport { IAppReducerState } from '../types';\nimport {\n  FETCH_PRODUCTS_LIST_FAILURE,\n  FETCH_PRODUCTS_LIST_REQUEST,\n  FETCH_PRODUCTS_LIST_SUCCESS,\n} from '../actions/actionTypes';\n\nexport const initialState: IAppReducerState = {\n  products: {\n    error: undefined,\n    values: [],\n    isLoading: false,\n  },\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch(action.type) {\n    case FETCH_PRODUCTS_LIST_REQUEST:\n      return {\n        ...state,\n        products: {\n          ...state.products,\n          isLoading: true,\n          values: [],\n          error: undefined,\n        },\n      };\n\n    case FETCH_PRODUCTS_LIST_SUCCESS:\n      return {\n        ...state,\n        products: {\n          ...state.products,\n          isLoading: false,\n          values: action.data.results,\n          error: undefined,\n        },\n      };\n\n    case FETCH_PRODUCTS_LIST_FAILURE:\n      return {\n        ...state,\n        products: {\n          ...state.products,\n          isLoading: false,\n          values: [],\n          error: action.error,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { sagaMiddleware } from '../sagas';\nimport appReducer from '../reducers';\n\nexport const reducers = combineReducers({\n  app: appReducer,\n});\n\nconst logger = createLogger({ diff: true });\n\nconst configureStore = () => {\n  const middlewares = [sagaMiddleware, logger];\n\n  const store = createStore(\n    reducers,\n    {},\n    compose(applyMiddleware(...middlewares)),\n  );\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './containers/App';\nimport configureStore from './store';\nimport { runSaga } from './sagas';\n\nconst store = configureStore();\n\n// starting the sagas.\nrunSaga();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}